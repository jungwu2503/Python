import sys
import math
import random
import pygame
from pygame.locals import QUIT, KEYDOWN, K_LEFT, K_RIGHT, Rect

class Block:
    """ 블록, 공, 패들 오브젝트 """
    def __init__(self, col, rect, speed=0):
        self.col = col
        self.rect = rect
        self.speed = speed
        self.dir = random.randint(-45, 45) + 270
        self.strong = 1

    def move(self):
        """ 공을 움직인다 """
        self.rect.centerx += math.cos(math.radians(self.dir))\
             * self.speed
        self.rect.centery -= math.sin(math.radians(self.dir))\
             * self.speed

    def draw(self):
        """ 블록, 공, 패들을 그린다 """
        if self.speed == 0:
            pygame.draw.rect(SURFACE, self.col, self.rect)
        else:
            pygame.draw.ellipse(SURFACE, self.col, self.rect)

def initialize():
    global BLOCKS, Live
    Live = 3
    BLOCKS = []
    colors = [(255, 0, 0), (255, 165, 0), (242, 242, 0),
                       (0, 128, 0), (128, 0, 128), (0, 0, 250)]

    for ypos, color in enumerate(colors, start=0):
        for xpos in range(0, 5):
            BLOCKS.append(Block(color, Rect(xpos * 100 + 60, ypos * 50 + 40, 80, 30)))
        
    for i in range(5):
        j = random.randrange(0, len(BLOCKS))
        BLOCKS[j].strong = 3
        BLOCKS[j].col = (100,100,100)

    BALL.rect.center = (300, 400)
    BALL.dir = random.randint(-45, 45) + 270

def tick():
    """ 프레임별 처리 """
    global BLOCKS
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == KEYDOWN:
            if event.key == K_LEFT:
                PADDLE.rect.centerx -= 5
            elif event.key == K_RIGHT:
                PADDLE.rect.centerx += 5
            elif event.key == pygame.K_r:
                initialize()
                
            #마우스사용
        elif event.type == pygame.MOUSEMOTION:
            PADDLE.rect.centerx = event.pos[0]
    if BALL.rect.centery < 1000:
        BALL.move()
    #if NEWBALL.rect.centery < 1000:
        #NEWBALL.move()  

    # 블록과 충돌?

    for block in BLOCKS:
        if block.rect.colliderect(BALL.rect):
            BALL.dir *= -1
            block.strong -= 1
            if block.strong == 0:
                BLOCKS.remove(block)
                
    
    #newballstart = 1
    #prevlen = len(BLOCKS)
    #BLOCKS = [x for x in BLOCKS
    #          if not x.rect.colliderect(BALL.rect)]
    #if len(BLOCKS) != prevlen:
    #    BALL.dir *= -1
        #if newballstart % 10 == 1:
        #    NEWBALL.draw()
        #newballstart += 1

    #
    prevlen = len(BLOCKS)
    BLOCKS = [x for x in BLOCKS
              if not x.rect.colliderect(NEWBALL.rect)]
    if len(BLOCKS) != prevlen:
        NEWBALL.dir *= -1
        
        

    # 패들과 충돌?
    if PADDLE.rect.colliderect(BALL.rect):
        BALL.dir = 90 + (PADDLE.rect.centerx - BALL.rect.centerx) \
            / PADDLE.rect.width * 80
    #
    if PADDLE.rect.colliderect(NEWBALL.rect):
        NEWBALL.dir = 90 + (PADDLE.rect.centerx - NEWBALL.rect.centerx) \
            / PADDLE.rect.width * 80

        

    # 벽과 충돌?
    if BALL.rect.centerx < 0 or BALL.rect.centerx > 600:
        BALL.dir = 180 - BALL.dir
    if BALL.rect.centery < 0:
        BALL.dir = -BALL.dir
        BALL.speed = 15

    #
    if NEWBALL.rect.centerx < 0 or NEWBALL.rect.centerx > 600:
        NEWBALL.dir = 180 - NEWBALL.dir
    if NEWBALL.rect.centery < 0:
        NEWBALL.dir = -NEWBALL.dir
        NEWBALL.speed = 15
        

pygame.init()
pygame.key.set_repeat(5, 5)
SURFACE = pygame.display.set_mode((600, 800))
FPSCLOCK = pygame.time.Clock()
BLOCKS = []
PADDLE = Block((242, 242, 0), Rect(300, 700, 100, 30))
BALL = Block((242, 242, 0), Rect(300, 400, 20, 20), 10)
NEWBALL = Block((150, 150, 150), Rect(300, 700, 20, 20), 5)
Live = 3

def main():
    global Live
    """ 메인 루틴 """
    myfont = pygame.font.SysFont(None, 80)
    mess_clear = myfont.render("Cleared!", True, (255, 255, 0))
    mess_over = myfont.render("Game Over!", True, (255, 255, 0))
    fps = 30
    colors = [(255, 0, 0), (255, 165, 0), (242, 242, 0),
              (0, 128, 0), (128, 0, 128), (0, 0, 250)]

    for ypos, color in enumerate(colors, start=0):
        for xpos in range(0, 5):
            BLOCKS.append(Block(color, Rect(xpos * 100 + 60, ypos * 50 + 40, 80, 30)))

    for i in range(5):
        j = random.randrange(0, len(BLOCKS))
        BLOCKS[j].strong = 3
        BLOCKS[j].col = (100,100,100)                

    while True:
        tick()

        SURFACE.fill((0, 0, 0))
        BALL.draw()
        PADDLE.draw()
        NEWBALL.draw()
        for block in BLOCKS:
            block.draw()

        if len(BLOCKS) == 29:
            NEWBALL.rect.center = (300, 700)
            NEWBALL.dir = random.randint(-45, 45) + 90
            #NEWBALL.draw()
            #NEWBALL.move()
        if len(BLOCKS) == 0:
            SURFACE.blit(mess_clear, (200, 400))
        elif BALL.rect.centery > 800:
            if Live > 1:
                Live -= 1
                BALL.rect.center = (300, 400)
                BALL.dir = random.randint(-45, 45) + 270
            else:
                SURFACE.blit(mess_over, (150, 400))

        pygame.display.update()
        FPSCLOCK.tick(fps)

if __name__ == '__main__':
    main()
